import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "../styles/globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

import { NextIntlClientProvider } from "next-intl";
import { locales, defaultLocale } from "../messages/config";
import enMessages from "../messages/en.json";
import arMessages from "../messages/ar.json";
import { getLocale } from "next-intl/server";
import IntlProviderWrapper from "@/components/IntlProviderWrapper";
import { getServerLocale } from "@/lib/get-locale";

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params?: { locale?: string };
}>) {
  // Detect locale from params or fallback
  const locale = await getServerLocale();
  console.log(locale);

  // const locale = params?.locale && locales.includes(params.locale) ? params.locale : defaultLocale;
  const messages = locale === "ar" ? arMessages : enMessages;
  const dir = locale === "ar" ? "rtl" : "ltr";
  return (
    <html suppressHydrationWarning className="light" lang={locale} dir={dir}>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <IntlProviderWrapper locale={locale} messages={messages}>
          {children}
        </IntlProviderWrapper>
      </body>
    </html>
  );
}
