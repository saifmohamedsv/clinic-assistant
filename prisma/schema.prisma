generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role            @default(RECEPTION)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

enum Role {
  RECEPTION
  DOCTOR
  ADMIN
}

model Patient {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  phone         String       @unique
  age           Int
  visits        Visit[]
  prescriptions Prescription[]
  createdAt     DateTime     @default(now())
}

model Visit {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  patientId  String    @db.ObjectId
  patient    Patient   @relation(fields: [patientId], references: [id])
  queueOrder Int
  complaint  String?
  status     VisitStatus @default(PENDING)
  createdAt  DateTime  @default(now())
  endedAt    DateTime?
}


enum VisitStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model Prescription {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  patientId  String    @db.ObjectId
  patient    Patient   @relation(fields: [patientId], references: [id])
  doctorName String
  content    String // JSON or markdown template
  sentBySms  Boolean  @default(false)
  createdAt  DateTime @default(now())
}
