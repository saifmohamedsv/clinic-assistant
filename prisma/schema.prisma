generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String   @unique
  password      String   // hashed
  role          Role     @default(RECEPTION)
  emailVerified Boolean  @default(false)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("users")
}

 
model Patient {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  phone         String       @unique
  age           Int
  visits        Visit[]
  reservations  Reservation[]
  prescriptions Prescription[]
  createdAt     DateTime     @default(now())
  @@map("patients")
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId  String   @db.ObjectId
  patient    Patient  @relation(fields: [patientId], references: [id])
  doctorId   String   @db.ObjectId
  doctor     Doctor   @relation(fields: [doctorId], references: [id])
  reservedAt DateTime // scheduled time slot
  duration   Int      @default(15) // appointment duration in minutes
  status     ReservationStatus @default(BOOKED)
  notes      String?  // additional notes for the appointment
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  visits Visit[]
  @@map("reservations")
}

model Visit {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  patientId  String    @db.ObjectId
  patient    Patient   @relation(fields: [patientId], references: [id])
  doctorId   String    @db.ObjectId
  doctor     Doctor    @relation(fields: [doctorId], references: [id])
  queueOrder Int
  complaint  String?
  status     VisitStatus @default(PENDING)
  createdAt  DateTime  @default(now())
  startedAt  DateTime?
  endedAt    DateTime?
  reservationId String? @db.ObjectId
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  @@map("visits")
}

model Doctor {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  specialty String?
  visits    Visit[]
  reservations Reservation[]
  @@map("doctors")
}

model Prescription {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  patientId  String    @db.ObjectId
  patient    Patient   @relation(fields: [patientId], references: [id])
  doctorName String
  content    String // JSON or markdown template
  sentBySms  Boolean  @default(false)
  createdAt  DateTime @default(now())
  @@map("prescriptions")
}


enum ReservationStatus {
  BOOKED
  IN_PROGRESS
  CANCELED
  COMPLETED
  NO_SHOW
}

enum VisitStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}


enum Role {
  RECEPTION
  DOCTOR
  ADMIN
}